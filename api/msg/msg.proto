syntax = "proto3";

package realtimex.msg;

option go_package = "github.com/lyounthzzz/realtimex/msg;msg";

// 消息服务 处理网关上行消息
service MsgService {
  // 连接
  rpc Connect(ConnectReq) returns (ConnectAck);
  // 订阅主题
  rpc Subscribe(SubscribeReq) returns (SubscribeAck);
  // 取消订阅主题
  rpc Unsubscribe(UnsubscribeReq) returns (UnsubscribeAck);
  // 发布消息
  rpc Publish(PublishReq) returns (PublishAck);
  // 心跳
  rpc Ping(PingReq) returns (PingAck);
  // 断开连接
  rpc Disconnect(DisconnectReq) returns (DisconnectAck);
}

// 消息推送服务 处理网关下行消息
service PushService {
  // 广播消息
  rpc Broadcast(PushMsg) returns (BroadcastResp);
  // 推送消息
  rpc Push(PushMsg) returns (PushMsgResp);
}

message SubscribeReq {
  // 消息id
  uint64 msgId = 1;
  // 主题列表
  repeated string topics = 2;
}

message SubscribeAck {
  // 消息id
  uint64 msgId = 1;
}

message UnsubscribeReq {
  // 消息id
  string msgId = 1;
  // 主题列表
  repeated string topics = 2;
}

message UnsubscribeAck {
  // 消息id
  uint64 msgId = 1;
}

message PublishReq {
  // 主题通道
  string topic = 1;
  // 消息id
  uint64 msgId = 2;
  // 消息内容
  bytes payload = 3;
}

message PublishAck {
  // 消息id
  uint64 msgId = 1;
}

message PingReq {}

message PingAck {}

message ConnectReq {}

message ConnectAck {}

message DisconnectReq {}

message DisconnectAck {}

message PushMsg {
  // 用户id
  string topic = 1;
  // 消息id
  uint64 msgId = 2;
  // 消息内容
  bytes payload = 3;
}

message PushMsgResp {}

message BroadcastResp {}